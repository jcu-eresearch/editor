{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["isHTML","str","doc","DOMParser","parseFromString","Array","from","body","childNodes","some","node","nodeType","VisualEditor","props","init","skin","content_style","max_height","autoresize_bottom_margin","body_class","forced_root_block","force_br_newlines","force_p_newlines","menubar","statusbar","branding","plugins","toolbar","App","useState","filename","setFilename","uploadedWorkbook","setUploadedWorkbook","sheet","setSheet","rowMetadata","setRowMetadata","window","onbeforeunload","updateCell","row","column","value","prevState","newState","enableVisualEditor","html","downloadSheet","type","worksheet","XLSX","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","SheetNames","writeFile","replace","className","Container","fluid","Row","Col","xs","span","order","lg","Button","variant","onClick","path","mdiPlus","title","size","FormFile","Label","htmlFor","mdiFileUploadOutline","Input","id","onChange","e","file","target","files","reader","FileReader","onload","data","result","read","raw","sheets","Sheets","sheet_to_json","header","name","readAsBinaryString","accept","DropdownButton","mdiFileDownloadOutline","Dropdown","Item","Table","striped","bordered","slice","map","rowIndex","Form","Control","onEditorChange","content","onFocus","mdiPencil","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffe8a4dc.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormFile,\n  Table,\n  DropdownButton,\n  Dropdown,\n} from 'react-bootstrap'\nimport Icon from '@mdi/react'\nimport {\n  mdiPlus,\n  mdiFileUploadOutline,\n  mdiFileDownloadOutline,\n  mdiPencil,\n} from '@mdi/js'\nimport XLSX from 'xlsx'\n\nimport tinymce from 'tinymce/tinymce'\nimport 'tinymce/icons/default'\nimport 'tinymce/themes/silver'\nimport 'tinymce/plugins/autoresize'\nimport 'tinymce/plugins/autolink'\nimport 'tinymce/plugins/advlist'\nimport 'tinymce/plugins/lists'\nimport 'tinymce/plugins/link'\nimport 'tinymce/plugins/image'\nimport 'tinymce/plugins/searchreplace'\nimport 'tinymce/plugins/code'\nimport 'tinymce/plugins/fullscreen'\nimport 'tinymce/plugins/paste'\nimport 'tinymce/plugins/help'\nimport { Editor } from '@tinymce/tinymce-react'\n\nimport 'tinymce/skins/ui/oxide/skin.css'\nimport 'tinymce/skins/ui/oxide/content.inline.css'\nimport './App.css'\n\nfunction isHTML(str) {\n  const doc = new DOMParser().parseFromString(str, 'text/html')\n  return Array.from(doc.body.childNodes).some(node => node.nodeType === 1)\n}\n\nfunction VisualEditor(props) {\n  return (\n    <Editor\n      init={{\n        skin: false,\n        //content_css:\n        //  'https://cdn.jcu.edu.au/cookbook/2.0/css/cookbook.min.css,https://cdn.jcu.edu.au/cookbook/2.0/css/fonts.min.css',\n        //content_css_cors: true,\n        content_style: 'body { font-family: sans-serif; }',\n        max_height: '20rem',\n        autoresize_bottom_margin: 0,\n        body_class: '',\n        forced_root_block: '',\n        force_br_newlines: false,\n        force_p_newlines: false,\n        menubar: false,\n        statusbar: false,\n        branding: false,\n        plugins: [\n          'autoresize',\n          'advlist',\n          'autolink',\n          'lists',\n          'link',\n          'image',\n          'searchreplace',\n          'code',\n          'fullscreen',\n          'paste',\n          'help',\n        ],\n        toolbar:\n          'undo redo searchreplace | formatselect | bold italic | \\\n             alignleft aligncenter alignright alignjustify | \\\n             bullist numlist outdent indent | link | removeformat | code | help',\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction App() {\n  const [filename, setFilename] = useState(null)\n  const [uploadedWorkbook, setUploadedWorkbook] = useState(null)\n  const [sheet, setSheet] = useState([\n    ['Key', 'Message'],\n    ['', ''],\n  ])\n  const [rowMetadata, setRowMetadata] = useState({})\n\n  window.onbeforeunload = () => true\n\n  const handleFileUpload = e => {\n    const [file] = e.target.files\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        const data = e.target.result\n        const workbook = XLSX.read(data, {\n          type: 'binary',\n          raw: true,\n          sheets: 0,\n        })\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]]\n        setSheet(XLSX.utils.sheet_to_json(worksheet, { raw: true, header: 1 }))\n        setUploadedWorkbook(workbook)\n        setFilename(file.name)\n        setRowMetadata({})\n      }\n      reader.readAsBinaryString(file)\n    }\n  }\n  const updateCell = (row, column, value) => {\n    setSheet(prevState => {\n      const newState = [...prevState]\n      newState[row][column] = value\n      return newState\n    })\n    if (isHTML(value)) {\n      enableVisualEditor(row)\n    }\n  }\n\n  const enableVisualEditor = row => {\n    setRowMetadata(prevState => ({\n      ...prevState,\n      [row]: { html: true },\n    }))\n  }\n\n  const downloadSheet = type => {\n    const worksheet = XLSX.utils.aoa_to_sheet(sheet)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(\n      workbook,\n      worksheet,\n      uploadedWorkbook ? uploadedWorkbook.SheetNames[0] : 'language'\n    )\n    XLSX.writeFile(\n      workbook,\n      `${filename ? filename.replace(/\\.[^/.]+$/, '') : 'language'}.${type}`\n    )\n  }\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row className=\"fixed-top mb-3 p-1 justify-content-between align-items-center border-bottom bg-white shadow\">\n          <Col xs={{ span: 'auto', order: 3 }} lg={{ span: 'auto', order: 1 }}>\n            <Button\n              variant=\"outline-secondary\"\n              onClick={() => {\n                setSheet(prevState => {\n                  return [...prevState, ['', '']]\n                })\n              }}\n            >\n              <Icon path={mdiPlus} title=\"Add\" size={1} className=\"mr-1\" />\n              Add row\n            </Button>\n          </Col>\n          <Col\n            xs={{ span: 12, order: 1 }}\n            lg={{ span: 'auto', order: 1 }}\n            className=\"text-center\"\n          >\n            <h1 className=\"h6 mb-lg-0\">\n              <span className=\"font-weight-bold\">Visual Language Editor</span>\n              {filename && (\n                <>\n                  : <code>{filename}</code>\n                </>\n              )}\n            </h1>\n          </Col>\n          <Col\n            xs={{ span: 'auto', order: 2 }}\n            lg={{ span: 'auto', order: 3 }}\n            className=\"mb-1 mb-lg-0\"\n          >\n            <FormFile className=\"d-inline-block\">\n              <FormFile.Label htmlFor=\"fileUpload\">\n                <span className=\"btn btn-primary\">\n                  <Icon\n                    path={mdiFileUploadOutline}\n                    title=\"Upload\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Upload spreadsheet\n                </span>\n              </FormFile.Label>\n              <FormFile.Input\n                className=\"d-none\"\n                id=\"fileUpload\"\n                onChange={handleFileUpload}\n                accept=\".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n              />\n            </FormFile>{' '}\n            <DropdownButton\n              className=\"d-inline-block\"\n              variant=\"outline-success\"\n              title={\n                <>\n                  <Icon\n                    path={mdiFileDownloadOutline}\n                    title=\"Download\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Download\n                </>\n              }\n            >\n              <Dropdown.Item onClick={() => downloadSheet('xlsx')}>\n                Excel 2007 (.xlsx)\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => downloadSheet('xls')}>\n                Excel (.xls)\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => downloadSheet('csv')}>\n                CSV (.csv)\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => downloadSheet('ods')}>\n                ODS (.ods)\n              </Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n        <Row className=\"pt-5\">\n          <Col>\n            <Table striped bordered>\n              <thead>\n                <tr>\n                  <th className=\"w-25\">{sheet[0][0]}</th>\n                  <th>{sheet[0][1]}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {sheet &&\n                  sheet.slice(1).map((row, rowIndex) => (\n                    <tr key={rowIndex + 1}>\n                      <td>\n                        <Form.Control\n                          className=\"position-sticky\"\n                          type=\"text\"\n                          value={row[0]}\n                          onChange={e =>\n                            updateCell(rowIndex + 1, 0, e.target.value)\n                          }\n                        />\n                      </td>\n                      <td>\n                        {rowMetadata &&\n                        rowMetadata[rowIndex + 1] &&\n                        rowMetadata[rowIndex + 1].html ? (\n                          <VisualEditor\n                            value={row[1]}\n                            onEditorChange={content =>\n                              updateCell(rowIndex + 1, 1, content)\n                            }\n                          />\n                        ) : (\n                          <Form.Row>\n                            <Col>\n                              <Form.Control\n                                type=\"text\"\n                                value={row[1]}\n                                onChange={e =>\n                                  updateCell(rowIndex + 1, 1, e.target.value)\n                                }\n                                onFocus={() =>\n                                  isHTML(row[1]) &&\n                                  enableVisualEditor(rowIndex + 1)\n                                }\n                              />\n                            </Col>\n                            <Col xs=\"auto\">\n                              <Button\n                                variant=\"outline-primary\"\n                                onClick={() => enableVisualEditor(rowIndex + 1)}\n                              >\n                                <Icon\n                                  path={mdiPencil}\n                                  title=\"Edit\"\n                                  size={1}\n                                  className=\"mr-1\"\n                                />\n                                HTML\n                              </Button>\n                            </Col>\n                          </Form.Row>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}