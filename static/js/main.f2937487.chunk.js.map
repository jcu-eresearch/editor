{"version":3,"sources":["App.js","index.js"],"names":["isHTML","str","doc","DOMParser","parseFromString","Array","from","body","childNodes","some","node","nodeType","VisualEditor","props","init","skin","content_style","max_height","autoresize_bottom_margin","body_class","forced_root_block","force_br_newlines","force_p_newlines","menubar","statusbar","branding","plugins","toolbar","App","useState","filename","setFilename","uploadedWorkbook","setUploadedWorkbook","DEFAULT_SHEET","sheet","setSheet","rowMetadata","setRowMetadata","window","onbeforeunload","updateCell","row","column","value","prevState","newState","enableVisualEditor","html","downloadSheet","type","worksheet","XLSX","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","SheetNames","writeFile","replace","className","Container","fluid","Row","as","Col","xs","span","order","lg","Button","variant","onClick","path","mdiPlus","title","size","FormFile","Label","htmlFor","mdiFileUploadOutline","Input","id","onChange","e","file","target","files","reader","FileReader","onload","data","result","read","raw","sheets","Sheets","sheet_to_json","header","name","readAsBinaryString","accept","DropdownButton","menuAlign","mdiFileDownloadOutline","Dropdown","Item","bsPrefix","mdiCog","slice","length","fill","reduce","acc","index","mdiMonitorEdit","Divider","mdiRestart","Table","striped","bordered","style","width","map","rowIndex","sheetRowIndex","Form","Control","placeholder","onEditorChange","content","onFocus","mdiPencil","class","href","mdiGithub","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2937487.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  FormFile,\n  Table,\n  DropdownButton,\n  Dropdown,\n} from 'react-bootstrap'\nimport Icon from '@mdi/react'\nimport {\n  mdiCog,\n  mdiFileDownloadOutline,\n  mdiFileUploadOutline,\n  mdiGithub,\n  mdiPencil,\n  mdiPlus,\n  mdiRestart,\n  mdiMonitorEdit,\n} from '@mdi/js'\nimport XLSX from 'xlsx'\n\nimport tinymce from 'tinymce/tinymce' // eslint-disable-line no-unused-vars\nimport 'tinymce/icons/default'\nimport 'tinymce/themes/silver'\nimport 'tinymce/plugins/autoresize'\nimport 'tinymce/plugins/autolink'\nimport 'tinymce/plugins/advlist'\nimport 'tinymce/plugins/lists'\nimport 'tinymce/plugins/link'\nimport 'tinymce/plugins/image'\nimport 'tinymce/plugins/searchreplace'\nimport 'tinymce/plugins/code'\nimport 'tinymce/plugins/fullscreen'\nimport 'tinymce/plugins/paste'\nimport 'tinymce/plugins/help'\nimport { Editor } from '@tinymce/tinymce-react'\n\nimport 'tinymce/skins/ui/oxide/skin.css'\nimport 'tinymce/skins/ui/oxide/content.inline.css'\nimport './App.css'\n\nfunction isHTML(str) {\n  const doc = new DOMParser().parseFromString(str, 'text/html')\n  return Array.from(doc.body.childNodes).some(node => node.nodeType === 1)\n}\n\nfunction VisualEditor(props) {\n  return (\n    <Editor\n      init={{\n        skin: false,\n        //content_css:\n        //  'https://cdn.jcu.edu.au/cookbook/2.0/css/cookbook.min.css,https://cdn.jcu.edu.au/cookbook/2.0/css/fonts.min.css',\n        //content_css_cors: true,\n        content_style: 'body { font-family: sans-serif; }',\n        max_height: '20rem',\n        autoresize_bottom_margin: 0,\n        body_class: '',\n        forced_root_block: '',\n        force_br_newlines: false,\n        force_p_newlines: false,\n        menubar: false,\n        statusbar: false,\n        branding: false,\n        plugins: [\n          'autoresize',\n          'advlist',\n          'autolink',\n          'lists',\n          'link',\n          'image',\n          'searchreplace',\n          'code',\n          'fullscreen',\n          'paste',\n          'help',\n        ],\n        toolbar:\n          'undo redo searchreplace | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link | removeformat | code | help',\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction App() {\n  const [filename, setFilename] = useState(null)\n  const [uploadedWorkbook, setUploadedWorkbook] = useState(null)\n  const DEFAULT_SHEET = [\n    ['Key', 'Message'],\n    ['', ''],\n  ]\n  const [sheet, setSheet] = useState(DEFAULT_SHEET)\n  const [rowMetadata, setRowMetadata] = useState({})\n\n  window.onbeforeunload = () => true\n\n  const handleFileUpload = e => {\n    const [file] = e.target.files\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = e => {\n        const data = e.target.result\n        const workbook = XLSX.read(data, {\n          type: 'binary',\n          raw: true,\n          sheets: 0,\n        })\n        const worksheet = workbook.Sheets[workbook.SheetNames[0]]\n        setSheet(XLSX.utils.sheet_to_json(worksheet, { raw: true, header: 1 }))\n        setUploadedWorkbook(workbook)\n        setFilename(file.name)\n        setRowMetadata({})\n      }\n      reader.readAsBinaryString(file)\n    }\n  }\n  const updateCell = (row, column, value) => {\n    setSheet(prevState => {\n      const newState = [...prevState]\n      newState[row][column] = value\n      return newState\n    })\n    if (isHTML(value)) {\n      enableVisualEditor(row)\n    }\n  }\n\n  const enableVisualEditor = row => {\n    setRowMetadata(prevState => ({\n      ...prevState,\n      [row]: { html: true },\n    }))\n  }\n\n  const downloadSheet = type => {\n    const worksheet = XLSX.utils.aoa_to_sheet(sheet)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(\n      workbook,\n      worksheet,\n      uploadedWorkbook ? uploadedWorkbook.SheetNames[0] : 'language'\n    )\n    XLSX.writeFile(\n      workbook,\n      `${filename ? filename.replace(/\\.[^/.]+$/, '') : 'language'}.${type}`\n    )\n  }\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row\n          as=\"header\"\n          className=\"fixed-top mb-3 p-1 justify-content-between align-items-center border-bottom bg-white shadow\"\n        >\n          <Col xs={{ span: 'auto', order: 3 }} lg={{ span: 'auto', order: 1 }}>\n            <Button\n              variant=\"outline-secondary\"\n              onClick={() => {\n                setSheet(prevState => {\n                  return [...prevState, ['', '']]\n                })\n              }}\n            >\n              <Icon path={mdiPlus} title=\"Add\" size={1} className=\"mr-1\" />\n              Add row\n            </Button>\n          </Col>\n          <Col\n            xs={{ span: 12, order: 1 }}\n            lg={{ span: 'auto', order: 1 }}\n            className=\"text-center\"\n          >\n            <h1 className=\"h6 mb-lg-0\">\n              <span className=\"font-weight-bold\">Visual Language Editor</span>\n              {filename && (\n                <>\n                  : <code>{filename}</code>\n                </>\n              )}\n            </h1>\n          </Col>\n          <Col\n            xs={{ span: 'auto', order: 2 }}\n            lg={{ span: 'auto', order: 3 }}\n            className=\"mb-1 mb-lg-0\"\n          >\n            <FormFile className=\"d-inline-block\">\n              <FormFile.Label htmlFor=\"fileUpload\">\n                <span className=\"btn btn-primary\">\n                  <Icon\n                    path={mdiFileUploadOutline}\n                    title=\"Upload\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Upload spreadsheet\n                </span>\n              </FormFile.Label>\n              <FormFile.Input\n                className=\"d-none\"\n                id=\"fileUpload\"\n                onChange={handleFileUpload}\n                accept=\".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n              />\n            </FormFile>{' '}\n            <DropdownButton\n              className=\"d-inline-block\"\n              variant=\"outline-success\"\n              id=\"downloadDropdown\"\n              menuAlign=\"right\"\n              title={\n                <>\n                  <Icon\n                    path={mdiFileDownloadOutline}\n                    title=\"Download\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Download\n                </>\n              }\n            >\n              <Dropdown.Item onClick={() => downloadSheet('xlsx')}>\n                Excel 2007 (.xlsx)\n              </Dropdown.Item>\n              <Dropdown.Item onClick={() => downloadSheet('csv')}>\n                CSV (.csv)\n              </Dropdown.Item>\n            </DropdownButton>{' '}\n            <DropdownButton\n              className=\"d-inline-block\"\n              variant=\"outline-secondary\"\n              id=\"settingsDropdown\"\n              menuAlign=\"right\"\n              bsPrefix=\"\"\n              title={\n                <>\n                  <Icon\n                    path={mdiCog}\n                    title=\"Settings\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                </>\n              }\n            >\n              <Dropdown.Item\n                onClick={() =>\n                  setRowMetadata(\n                    sheet &&\n                      Array(sheet.slice(1).length)\n                        .fill({ html: true })\n                        .reduce((acc, value, index) => {\n                          acc[index + 1] = value\n                          return acc\n                        }, {})\n                  )\n                }\n              >\n                <Icon path={mdiMonitorEdit} size={1} className=\"mr-1\" />\n                Edit all as HTML\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item\n                className=\"text-danger\"\n                onClick={() => {\n                  setFilename(null)\n                  setUploadedWorkbook(null)\n                  setSheet(DEFAULT_SHEET)\n                  setRowMetadata({})\n                }}\n              >\n                <Icon path={mdiRestart} size={1} className=\"mr-1\" />\n                Restart app\n              </Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n        <Row as=\"main\" className=\"mt-5 mb-3\">\n          <Col>\n            <Table striped bordered>\n              <thead>\n                <tr>\n                  <th style={{ width: '1%' }}>Row</th>\n                  <th className=\"w-25\">{sheet[0][0]}</th>\n                  <th>{sheet[0][1]}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {sheet &&\n                  sheet.slice(1).map((row, rowIndex) => {\n                    const sheetRowIndex = rowIndex + 1\n                    return (\n                      <tr key={sheetRowIndex}>\n                        <td className=\"text-center\">\n                          <code>{sheetRowIndex + 1}</code>\n                        </td>\n                        <td>\n                          <Form.Control\n                            className=\"position-sticky\"\n                            type=\"text\"\n                            placeholder={sheet[0][0]}\n                            value={row[0]}\n                            onChange={e =>\n                              updateCell(sheetRowIndex, 0, e.target.value)\n                            }\n                          />\n                        </td>\n                        <td>\n                          {rowMetadata &&\n                          rowMetadata[sheetRowIndex] &&\n                          rowMetadata[sheetRowIndex].html ? (\n                            <VisualEditor\n                              value={row[1]}\n                              onEditorChange={content =>\n                                updateCell(sheetRowIndex, 1, content)\n                              }\n                            />\n                          ) : (\n                            <Form.Row>\n                              <Col>\n                                <Form.Control\n                                  type=\"text\"\n                                  placeholder={sheet[0][1]}\n                                  value={row[1]}\n                                  onChange={e =>\n                                    updateCell(sheetRowIndex, 1, e.target.value)\n                                  }\n                                  onFocus={() =>\n                                    isHTML(row[1]) &&\n                                    enableVisualEditor(sheetRowIndex)\n                                  }\n                                />\n                              </Col>\n                              <Col xs=\"auto\">\n                                <Button\n                                  variant=\"outline-primary\"\n                                  onClick={() =>\n                                    enableVisualEditor(sheetRowIndex)\n                                  }\n                                >\n                                  <Icon\n                                    path={mdiPencil}\n                                    title=\"Edit\"\n                                    size={1}\n                                    className=\"mr-1\"\n                                  />\n                                  HTML\n                                </Button>\n                              </Col>\n                            </Form.Row>\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  })}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row as=\"footer\" className=\"pt-3 border-top\">\n          <Col className=\"text-center text-muted\">\n            <ul class=\"list-inline\">\n              <li class=\"list-inline-item mr-2 pr-2 border-right\">\n                Made by the{' '}\n                <a href=\"https://github.com/jcu-eresearch\">\n                  JCU eResearch Centre\n                </a>\n              </li>\n              <li class=\"list-inline-item\">\n                <a href=\"https://github.com/jcu-eresearch/redbox-language-editor\">\n                  <Icon\n                    path={mdiGithub}\n                    title=\"GitHub\"\n                    size={1}\n                    className=\"mr-1\"\n                  />\n                  Source code\n                </a>\n              </li>\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}